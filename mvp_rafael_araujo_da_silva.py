# -*- coding: utf-8 -*-
"""MVP Rafael Araujo da Silva

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_BZItx711bAj8uxYUenL-ZEB_0RUygsd

# MVP An√°lise de Dados e Boas Pr√°ticas

**Nome:** Rafael Araujo da Silva

**Matr√≠cula:**
4052024001926

**Dataset:** [Mushroom Dataset](https://https://archive.ics.uci.edu/dataset/73/mushroom)

# Descri√ß√£o do Problema

O objetivo deste projeto √© prever se um cogumelo √© comest√≠vel (edible) ou venenoso (poisonous) com base em caracter√≠sticas observadas, como cor do chap√©u, odor, tipo de superf√≠cie, presen√ßa de anel, entre outros. Esse tipo de classifica√ß√£o pode ser extremamente √∫til em contextos educacionais, acad√™micos e at√© mesmo em aplica√ß√µes pr√°ticas de seguran√ßa alimentar.

## Hip√≥teses do Problema

As hip√≥teses que tracei s√£o as seguintes:

‚Ä¢ Cada inst√¢ncia do dataset representa um √∫nico cogumelo, com atributos observados de maneira precisa.

‚Ä¢ N√£o existem cogumelos simultaneamente comest√≠veis e venenosos.

‚Ä¢ Todos os atributos categ√≥ricos s√£o descritivos e mutuamente exclusivos (ex: o cogumelo tem um tipo de odor por vez).

‚Ä¢ A presen√ßa de valores como ? no atributo stalk-root pode representar aus√™ncia de informa√ß√£o ou dificuldade na coleta, e ser√° tratada adequadamente.

## Tipo de Problema

Este √© um problema de aprendizado supervisionado, pois temos uma vari√°vel-alvo conhecida (class) e buscamos prever seu valor com base em vari√°veis de entrada.
Trata-se especificamente de um problema de classifica√ß√£o bin√°ria: a classe pode ser "e" (edible/comest√≠vel) ou "p" (poisonous/venenoso).

## Sele√ß√£o de Dados

## üìã Restri√ß√µes e crit√©rios de sele√ß√£o

- O dataset Mushroom foi escolhido por conter apenas vari√°veis categ√≥ricas, o que permite praticar codifica√ß√£o e an√°lise explorat√≥ria.
- N√£o foram utilizadas bases que contenham valores cont√≠nuos, propositalmente, para aprofundar o trabalho em dados categ√≥ricos.

## Atributos do Dataset

| Atributo                    | Descri√ß√£o                                                  |
|-----------------------------|--------------------------------------------------------------|
| `class`                     | Classe: comest√≠vel (e) ou venenoso (p)                       |
| `cap-shape`                 | Formato do chap√©u (bell, conical, convex, flat, etc.)        |
| `cap-surface`               | Superf√≠cie do chap√©u (fibrous, grooves, scaly, smooth)       |
| `cap-color`                 | Cor do chap√©u (brown, yellow, white, etc.)                   |
| `bruises`                   | Presen√ßa de manchas (bruises) ‚Äì yes ou no                    |
| `odor`                      | Odor (almond, anise, foul, none, etc.)                       |
| `gill-attachment`           | Fixa√ß√£o das lamelas ao caule                                |
| `gill-spacing`              | Espa√ßamento das lamelas                                      |
| `gill-size`                 | Tamanho das lamelas                                          |
| `gill-color`                | Cor das lamelas                                              |
| `stalk-shape`               | Forma do caule (enlarging ou tapering)                       |
| `stalk-root`                | Tipo de raiz do caule (bulbous, club, equal, rooted, ou ?)   |
| `stalk-surface-above-ring` | Superf√≠cie do caule acima do anel                            |
| `stalk-surface-below-ring` | Superf√≠cie do caule abaixo do anel                           |
| `stalk-color-above-ring`   | Cor do caule acima do anel                                   |
| `stalk-color-below-ring`   | Cor do caule abaixo do anel                                  |
| `veil-type`                 | Tipo de v√©u                                                  |
| `veil-color`                | Cor do v√©u                                                   |
| `ring-number`               | N√∫mero de an√©is no caule                                     |
| `ring-type`                 | Tipo de anel                                                 |
| `spore-print-color`        | Cor da impress√£o de esporos                                  |
| `population`               | Tamanho da popula√ß√£o onde o cogumelo √© encontrado            |
| `habitat`                  | Tipo de habitat (grasses, woods, paths, etc.)                |

# Importa√ß√£o das Bibliotecas Necess√°rias e Carga de Dados

Esta se√ß√£o consolida todas as importa√ß√µes de bibliotecas necess√°rias para a an√°lise, visualiza√ß√£o e pr√©-processamento dos dados, bem como o carregamento inicial do dataset Iris.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# carregamento do dataset (aqui, ele fica dispon√≠vel nesse m√©todo)
# URL do arquivo .data no GitHub
raw_url = 'https://raw.githubusercontent.com/rafaelaraujozr/mushroom/main/agaricus-lepiota.data'

# Lista de nomes de colunas (23 atributos + alvo)
columns = [
    'class', 'cap-shape', 'cap-surface', 'cap-color', 'bruises', 'odor',
    'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color',
    'stalk-shape', 'stalk-root', 'stalk-surface-above-ring',
    'stalk-surface-below-ring', 'stalk-color-above-ring',
    'stalk-color-below-ring', 'veil-type', 'veil-color', 'ring-number',
    'ring-type', 'spore-print-color', 'population', 'habitat'
]

# 1Ô∏è‚É£ L√™ o arquivo direto do GitHub
df = pd.read_csv(raw_url, header=None, names=columns, na_values='?')

# 2Ô∏è‚É£ Visualiza as primeiras linhas
df.head()

"""√â poss√≠vel perceber que os dados est√£o codificados com letras (ex: `x`, `s`, `n`, `p`, etc.), o que representa valores categ√≥ricos definidos no dicion√°rio da base original.

Um ponto de aten√ß√£o √© a presen√ßa do valor `NaN` (antes era `?`) na coluna `stalk-root`, o que indica dados ausentes.

# An√°lise de Dados

Nesta etapa de An√°lise de Dados Explorat√≥ria (EDA) sobre o dataset Mushroom, visamos entender a distribui√ß√£o, as rela√ß√µes e as caracter√≠sticas das vari√°veis, o que √© crucial para as etapas subsequentes de pr√©-processamento e modelagem.

## Total e Tipo das Inst√¢ncias
O dataset possui **8124 inst√¢ncias** e **23 atributos**, al√©m da vari√°vel alvo (`class`), totalizando 24 colunas.
"""

print(f"Total de inst√¢ncias: {len(df)}")
print("\nTipos de dados por coluna:")
print(df.info())

"""Todos os atributos s√£o do tipo `object`, ou seja, **categ√≥ricos**. Isso √© esperado, pois o dataset Mushroom foi constru√≠do apenas com vari√°veis qualitativas.

Contabilizando quantos valores faltantes existem por coluna:
"""

df.isnull().sum()

"""A coluna `stalk-root` apresenta **2480 valores ausentes**, o que corresponde a aproximadamente **30%** do total do dataset. Nenhuma outra coluna possui valores faltantes.

Como todos os dados s√£o categ√≥ricos, o m√©todo `describe()` trar√° contagens e frequ√™ncias:
"""

df.describe()

"""O resumo mostra:

- A maioria dos atributos tem 3 a 12 categorias √∫nicas.
- A vari√°vel `veil-type` tem apenas **um valor √∫nico** ‚Äî portanto, **n√£o traz informa√ß√£o √∫til** para a classifica√ß√£o e pode ser descartada.

Pr√≥ximos passos:
- Tratar valores ausentes no dataset.
- Remover colunas que n√£o agregam valor.
- Codificar vari√°veis categ√≥ricas.
- Preparar uma base num√©rica com os dados transformados.
"""

df_prep['stalk-root'] = df_prep['stalk-root'].fillna('missing')

"""Ao analisar a coluna `veil-type`, identificamos que ela possui apenas um valor √∫nico em todas as inst√¢ncias. Isso significa que ela n√£o contribui para o processo de aprendizagem dos modelos e pode ser removida."""

df_prep.drop(columns=['veil-type'], inplace=True)

"""Como todas as colunas (com exce√ß√£o de `class`) s√£o categ√≥ricas, aplicaremos **One-Hot Encoding** para transformar essas vari√°veis em forma num√©rica, que pode ser interpretada pelos algoritmos de machine learning.

Tamb√©m converteremos a vari√°vel alvo `class` para valores bin√°rios:
- `e` (edible/comest√≠vel) ‚Üí 0
- `p` (poisonous/venenoso) ‚Üí 1
"""

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Separando X e y
X = df_prep.drop(columns=['class'])
y = df_prep['class'].map({'e': 0, 'p': 1})  # binariza o alvo

# Lista de colunas categ√≥ricas
categorical_cols = X.columns.tolist()

# Definindo o pr√©-processador com OneHotEncoder
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
    ]
)

# Aplicando a transforma√ß√£o
X_encoded = preprocessor.fit_transform(X)
encoded_feature_names = preprocessor.named_transformers_['cat'].get_feature_names_out(categorical_cols)

# Convertendo para DataFrame
df_encoded = pd.DataFrame(X_encoded.toarray(), columns=encoded_feature_names)
df_encoded['target'] = y.values

"""CORRELA√á√ïES & AN√ÅLISES AVAN√áADAS

Agora que todas as vari√°veis est√£o em formato num√©rico (one-hot), podemos mensurar a rela√ß√£o entre cada feature e o alvo (`target` = 1 ‚Üí venenoso).

**Observa√ß√£o**  
> Como tanto as features quanto o alvo s√£o bin√°rias, o coeficiente de correla√ß√£o de Pearson equivale ao *point-biserial* ‚Äì uma medida v√°lida para este contexto.
"""

# 1Ô∏è‚É£  Matriz de correla√ß√£o (apenas num√©ricas)
corr_matrix = df_encoded.corr(numeric_only=True)

# 2Ô∏è‚É£  Correla√ß√£o de cada feature com o alvo
target_corr = (
    corr_matrix['target']          # coluna que relaciona cada vari√°vel ao alvo
    .drop('target')                # remove a autocorrela√ß√£o
    .sort_values(ascending=False)  # ordena da maior para a menor
)

# 3Ô∏è‚É£  Exibe as 15 vari√°veis mais correlacionadas (positiva ou negativamente)
top15 = target_corr.head(15)
bottom15 = target_corr.tail(15)

print("Top 15 (positivamente correlacionadas ‚Üí indicam cogumelo venenoso):")
display(top15)

print("\nTop 15 (negativamente correlacionadas ‚Üí indicam cogumelo comest√≠vel):")
display(bottom15.abs().sort_values(ascending=False))

"""üîç Principais insights

- `odor_foul` e `odor_pungent` t√™m correla√ß√£o **fortemente positiva**, indicando que odores desagrad√°veis s√£o excelentes ind√≠cios de cogumelos venenosos.  
- `gill_color_green` e `spore_print_color_green` tamb√©m aparecem no topo, corroborando literatura micol√≥gica.  
- Entre as correla√ß√µes negativas (associadas a cogumelos comest√≠veis), destacam-se `odor_none`, `bruises_t` (apresenta manchas) e `gill_size_b`.  

Esses resultados refor√ßam o que vimos na etapa gr√°fica: **cheiro e cor** s√£o atributos altamente discriminativos.
"""

import matplotlib.pyplot as plt
import seaborn as sns

sel_feats = list(top15.index) + list(bottom15.index)
plt.figure(figsize=(8, 12))
sns.heatmap(
    corr_matrix.loc[sel_feats + ['target'], sel_feats + ['target']],
    cmap='coolwarm',
    center=0,
    linewidths=.5
)
plt.title('Heatmap ‚Äì correla√ß√£o entre features selecionadas e alvo')
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Junta top 10 positivas e top 10 negativas
top_pos = target_corr.head(10)
top_neg = target_corr.tail(10)

# Junta em um s√≥ DataFrame
corr_df = pd.concat([top_pos, top_neg])
corr_df = corr_df.sort_values()

# Plot
plt.figure(figsize=(10, 7))
sns.barplot(
    x=corr_df.values,
    y=corr_df.index,
    palette=['#1f77b4' if v < 0 else '#d62728' for v in corr_df.values]
)
plt.axvline(0, color='black', linestyle='--')
plt.title('Correla√ß√£o entre vari√°veis one-hot e classe (venenoso)')
plt.xlabel('Correla√ß√£o com a vari√°vel target (1 = venenoso)')
plt.ylabel('Vari√°vel')
plt.tight_layout()
plt.show()

"""##CONCLUS√ÉO

Uma das an√°lises mais reveladoras do estudo foi a rela√ß√£o entre o atributo **`odor`** e a vari√°vel alvo `class` (comest√≠vel ou venenoso).

##Compara√ß√£o entre odor e toxicidade

Durante a etapa de an√°lise explorat√≥ria, foi poss√≠vel observar que determinados tipos de **odor** est√£o fortemente associados √† toxicidade do cogumelo:

- Os cogumelos com **odor desagrad√°vel**, como:
  - `foul` (f√©tido),
  - `pungent` (√°cido/irritante) e
  - `spicy` (picante),
  apresentam uma **correla√ß√£o muito alta com a classe venenosa (`p`)**.

- Em contrapartida, cogumelos com **aus√™ncia de odor** (`none`) aparecem predominantemente associados √† classe comest√≠vel (`e`).

Essas rela√ß√µes foram confirmadas por:

- Visualiza√ß√µes gr√°ficas com `countplot` que mostraram a separa√ß√£o quase total entre os tipos de odor e a classe;
- An√°lise de correla√ß√£o, onde `odor_foul` e `odor_pungent` apresentaram os maiores coeficientes positivos com a vari√°vel `target` (venenoso);
- Gr√°ficos de barras que destacaram os odores como os atributos mais preditivos.

## Conclus√£o final

A vari√°vel `odor` se mostrou o **fator mais determinante** para identificar a toxicidade de um cogumelo. Esse insight refor√ßa a import√¢ncia de atributos sensoriais no processo de classifica√ß√£o e sugere que, mesmo antes de aplicar modelos de machine learning, j√° √© poss√≠vel obter **fortes ind√≠cios da classe do cogumelo apenas observando seu odor**.

"""